# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."minecraft-server-mc" = {
    image = "itzg/minecraft-server:latest";
    environment = {
      "DIFFICULTY" = "2";
      "EULA" = "TRUE";
      "MAX_PLAYERS" = "100";
      "MEMORY" = "6144M";
      "MOTD" = "GPN Lets go";
      "OPS" = "Trampolinsprung";
      "SEED" = "2830527040085797979";
      "SIMULATION_DISTANCE" = "4";
      "TYPE" = "FOLIA";
      "TZ" = "Europe/Berlin";
      "USE_AIKAR_FLAGS" = "true";
      "VERSION" = "1.21.5";
    };
    volumes = [
      "/flash/minecraft:/data:rw"
    ];
    ports = [
      "25565:25565/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mc"
      "--network=minecraft-server_default"
    ];
  };
  systemd.services."podman-minecraft-server-mc" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-minecraft-server_default.service"
    ];
    requires = [
      "podman-network-minecraft-server_default.service"
    ];
    partOf = [
      "podman-compose-minecraft-server-root.target"
    ];
    wantedBy = [
      "podman-compose-minecraft-server-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-minecraft-server_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f minecraft-server_default";
    };
    script = ''
      podman network inspect minecraft-server_default || podman network create minecraft-server_default
    '';
    partOf = [ "podman-compose-minecraft-server-root.target" ];
    wantedBy = [ "podman-compose-minecraft-server-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-minecraft-server-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
